---
- name: Certificate Authority that can be used to generate additional TLS certificates
  hosts: k8main
  remote_user: wisccourant
  become: true
  vars:
    kubernetes_public_address: "your-kubernetes-public-address"
    ca_cert: /etc/kubernetes/ca.pem
    # Add paths for the certs for each component (you can update these based on your actual paths)
    etcd_cert: /etc/etcd/etcd.pem
    etcd_key: /etc/etcd/etcd-client-key.pem
    etcd_client_cert: /etc/etcd/etcd-client.pem
    etcd_client_key: /etc/etcd/etcd-client-key.pem
    controller_manager_cert: /etc/kubernetes/controller-manager.pem
    controller_manager_key: /etc/kubernetes/controller-manager-key.pem
    scheduler_cert: /etc/kubernetes/scheduler.pem
    scheduler_key: /etc/kubernetes/scheduler-key.pem
    kubeconfig_dir: "/home/wisccourant/certificates"

  tasks:
    - name: Provision CA and generate TLS Certificates
      block:
        - name: Create directory certificates
          ansible.builtin.file:
            path: /home/wisccourant/certificates/
            state: directory
            mode: "0755"

        - name: Download certificates signing requests from gcp
          ansible.builtin.shell: |
            sudo gsutil cp {{ item.source }} {{ item.dest }}
          loop:
            - { source: "gs://kthw-misc/admin-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/ca-config.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/ca-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/kube-proxy-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/kubernetes-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/worker-0-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/worker-1-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/worker-2-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/controller-manager-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/scheduler-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/etcd-csr.json", dest: "/home/wisccourant/certificates/" }
            - { source: "gs://kthw-misc/etcd-client-csr.json", dest: "/home/wisccourant/certificates/" }
          changed_when: false
          register: status

        - name: Generate the CA certificate and private key
          ansible.builtin.shell: |
            set -o pipefail
            sudo cfssl gencert -initca ca-csr.json | sudo cfssljson -bare ca
          args:
            executable: /bin/bash
            chdir: /home/wisccourant/certificates/
          changed_when: false

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/ca-key.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/ca.pem.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Generate the admin client certificate and private key
          ansible.builtin.shell: |
            set -o pipefail
            sudo cfssl gencert \
              -ca=ca.pem \
              -ca-key=ca-key.pem \
              -config=ca-config.json \
              -profile=kubernetes \
              admin-csr.json | sudo cfssljson -bare admin
          args:
            executable: /bin/bash
            chdir: /home/wisccourant/certificates/
          changed_when: false

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/admin-key.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/admin.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Generate the Controller Manager certificate and private key
          ansible.builtin.shell: |
            set -o pipefail
            sudo cfssl gencert \
                -ca=ca.pem \
                -ca-key=ca-key.pem \
                -config=ca-config.json \
                -profile=kubernetes \
                controller-manager-csr.json | cfssljson -bare controller-manager
          args:
            executable: /bin/bash
            chdir: /home/wisccourant/certificates/
          changed_when: false

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/controller-manager-key.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/controller-manager.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Generate the scheduler certificate and private key
          ansible.builtin.shell: |
            set -o pipefail
            sudo cfssl gencert \
              -ca=ca.pem \
              -ca-key=ca-key.pem \
              -config=ca-config.json \
              -profile=kubernetes \
              scheduler-csr.json | cfssljson -bare scheduler
          args:
            executable: /bin/bash
            chdir: /home/wisccourant/certificates/
          changed_when: false

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/scheduler-key.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/scheduler.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Generate the etcd server certificate and private key
          ansible.builtin.shell: |
            set -o pipefail
            sudo cfssl gencert \
              -ca=ca.pem \
              -ca-key=ca-key.pem \
              -config=ca-config.json \
              -profile=kubernetes \
              etcd-csr.json | cfssljson -bare etcd
          args:
            executable: /bin/bash
            chdir: /home/wisccourant/certificates/
          changed_when: false

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/etcd-key.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/etcd.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Generate the etcd-client certificate and private key
          ansible.builtin.shell: |
            set -o pipefail
            sudo cfssl gencert \
              -ca=ca.pem \
              -ca-key=ca-key.pem \
              -config=ca-config.json \
              -profile=kubernetes \
              etcd-client-csr.json | cfssljson -bare etcd-client
          args:
            executable: /bin/bash
            chdir: /home/wisccourant/certificates/
          changed_when: false

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/etcd-client-key.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/etcd-client.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Generate a certificate and private key for each Kubernetes worker node
          ansible.builtin.shell: |
            set -o pipefail
            sudo cfssl gencert \
              -ca=ca.pem \
              -ca-key=ca-key.pem \
              -config=ca-config.json \
              -hostname={{ item.instance }},{{ item.ip }} \
              -profile=kubernetes \
              {{ item.instance }}-csr.json | sudo cfssljson -bare {{ item.instance }}
          args:
            executable: /bin/bash
            chdir: /home/wisccourant/certificates/
          changed_when: false
          register: status
          loop:
            - { instance: "worker-0", ip: "10.240.0.20" }
            - { instance: "worker-1", ip: "10.240.0.21" }
            - { instance: "worker-2", ip: "10.240.0.22" }

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Generate the kube-proxy client certificate and private key
          ansible.builtin.shell: |
            set -o pipefail
            sudo cfssl gencert \
              -ca=ca.pem \
              -ca-key=ca-key.pem \
              -config=ca-config.json \
              -profile=kubernetes \
              kube-proxy-csr.json | sudo cfssljson -bare kube-proxy
          args:
            executable: /bin/bash
            chdir: /home/wisccourant/certificates/
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create directory certificates
          ansible.builtin.file:
            path: /home/wisccourant/certificates/
            state: directory
            mode: "0755"

        - name: Download ip from gcp
          ansible.builtin.shell: |
            sudo gsutil cp gs://kthw-misc/static_ip.txt /home/wisccourant/certificates/
          changed_when: false
          register: status

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Read the IP address from the text file
          ansible.builtin.command:
            cmd: cat /home/wisccourant/certificates/static_ip.txt
            chdir: /home/wisccourant/certificates/
          register: kubernetes_public_address
          changed_when: false

        - name: Verify that the IP address was retrieved
          ansible.builtin.assert:
            that:
              - kubernetes_public_address.stdout | length > 0  # Ensures the content is not empty
            msg: "No IP address was retrieved from the file."

        - name: Use the IP address
          ansible.builtin.debug:
            msg: "The extracted IP address is: {{ kubernetes_public_address.stdout }}"

        - name: Generate the Kubernetes API Server certificate and private key
          ansible.builtin.shell: |
            set -o pipefail
            sudo cfssl gencert \
              -ca=ca.pem \
              -ca-key=ca-key.pem \
              -config=ca-config.json \
              -hostname=10.32.0.10,10.240.0.10,10.240.0.11,10.240.0.12,{{ kubernetes_public_address.stdout | trim }},127.0.0.1,kubernetes.default \
              -profile=kubernetes \
              kubernetes-csr.json | sudo cfssljson -bare kubernetes
          args:
            executable: /bin/bash
            chdir: /home/wisccourant/certificates/
          changed_when: false

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/kubernetes-key.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Check if the file exists
          ansible.builtin.stat:
            path: "/home/wisccourant/certificates/kubernetes.pem"
          register: file_stat

        - name: Display file existence result
          ansible.builtin.debug:
            msg: "The file exists"
          when: file_stat.stat.exists

        - name: Upload worker certificates to gcp
          ansible.builtin.shell: |
            sudo gsutil cp {{ item.source }} {{ item.dest }}
          loop:
            - { source: "/home/wisccourant/certificates/worker-0-key.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/worker-0.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/worker-1-key.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/worker-1.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/worker-2-key.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/worker-2.pem", dest: "gs://kthw-misc/" }
          changed_when: false
          register: status

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Upload Kubernetes certificates to gcp
          ansible.builtin.shell: |
            sudo gsutil cp {{ item.source }} {{ item.dest }}
          loop:
            - { source: "/home/wisccourant/certificates/kubernetes-key.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/kubernetes.pem", dest: "gs://kthw-misc/" }
          changed_when: false
          register: status

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Set the cluster's API server and other details for kubeconfig
          ansible.builtin.shell: |
            kubectl config set-cluster kubernetes-the-hard-way \
              --certificate-authority=ca.pem \
              --embed-certs=true \
              --server=https://{{ kubernetes_public_address.stdout | trim }}:6443 \
              --kubeconfig={{ item.instance }}.kubeconfig
          loop:
            - { instance: "worker-0" }
            - { instance: "worker-1" }
            - { instance: "worker-2" }
          args:
            chdir: /home/wisccourant/certificates/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Set or modify credentials for a user in the kubeconfig file
          ansible.builtin.shell: |
            kubectl config set-credentials system:node:{{ item.instance }} \
              --client-certificate={{ item.instance }}.pem \
              --client-key={{ item.instance }}-key.pem \
              --embed-certs=true \
              --kubeconfig={{ item.instance }}.kubeconfig
          loop:
            - { instance: "worker-0" }
            - { instance: "worker-1" }
            - { instance: "worker-2" }
          args:
            chdir: /home/wisccourant/certificates/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create or modify a context in your kubeconfig file, linking a Kubernetes cluster, user, and namespace
          ansible.builtin.shell: |
            kubectl config set-context default \
              --cluster=kubernetes-the-hard-way \
              --user=system:node:{{ item.instance }} \
              --kubeconfig={{ item.instance }}.kubeconfig
          loop:
            - { instance: "worker-0" }
            - { instance: "worker-1" }
            - { instance: "worker-2" }
          args:
            chdir: /home/wisccourant/certificates/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Switch between different configurations in your kubeconfig file
          ansible.builtin.shell: |
            kubectl config use-context default --kubeconfig={{ item.instance }}.kubeconfig
          loop:
            - { instance: "worker-0" }
            - { instance: "worker-1" }
            - { instance: "worker-2" }
          args:
            chdir: /home/wisccourant/certificates/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Generate a kubeconfig file for the kube-proxy service
          ansible.builtin.shell: |
            kubectl config set-cluster kubernetes-the-hard-way \
              --certificate-authority=ca.pem \
              --embed-certs=true \
              --server=https://{{ kubernetes_public_address.stdout | trim }}:6443 \
              --kubeconfig=kube-proxy.kubeconfig
          args:
            chdir: /home/wisccourant/certificates/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create or modify a context in your kubeconfig file, linking a Kubernetes cluster, user, and namespace
          ansible.builtin.shell: |
            kubectl config set-credentials kube-proxy \
              --client-certificate=kube-proxy.pem \
              --client-key=kube-proxy-key.pem \
              --embed-certs=true \
              --kubeconfig=kube-proxy.kubeconfig
          args:
            chdir: /home/wisccourant/certificates/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create or modify a context in your kubeconfig file, linking a Kubernetes cluster, user, and namespace
          ansible.builtin.shell: |
            kubectl config set-context default \
              --cluster=kubernetes-the-hard-way \
              --user=kube-proxy \
              --kubeconfig=kube-proxy.kubeconfig
          args:
            chdir: /home/wisccourant/certificates/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Switch between different configurations in your kubeconfig file
          ansible.builtin.shell: |
            kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
          args:
            chdir: /home/wisccourant/certificates/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Generate kubeconfig file for etcd
          ansible.builtin.shell: |
            kubectl config set-cluster kubernetes-the-hard-way \
              --certificate-authority=ca.pem \
              --embed-certs=true \
              --server=https://{{ kubernetes_public_address.stdout | trim }}:6443 \
              --kubeconfig=etcd.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Set credentials for etcd client in kubeconfig
          ansible.builtin.shell: |
            kubectl config set-credentials etcd-client \
              --client-certificate={{ etcd_client_cert }} \
              --client-key={{ etcd_client_key }} \
              --cert-file={{ etcd_cert }} \
              --key-file={{ etcd_key }} \
              --peer-cert-file={{ etcd_cert }} \
              --peer-key-file={{ etcd_key }} \
              --trusted-ca-file={{ ca_cert }} \
              --peer-trusted-ca-file={{ ca_cert }} \
              --client-cert-auth \
              --peer-client-cert-auth
              --embed-certs=true \
              --kubeconfig=etcd.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Set context for etcd in kubeconfig
          ansible.builtin.shell: |
            kubectl config set-context default \
              --cluster=kubernetes-the-hard-way \
              --user=etcd \
              --kubeconfig=etcd.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Use context for etcd kubeconfig
          ansible.builtin.shell: |
            kubectl config use-context default --kubeconfig=etcd.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Generate kubeconfig file for controller-manager
          ansible.builtin.shell: |
            kubectl config set-cluster kubernetes-the-hard-way \
              --certificate-authority=ca.pem \
              --embed-certs=true \
              --server=https://{{ kubernetes_public_address }}:6443 \
              --kubeconfig={{ kubeconfig_dir }}/controller-manager.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Set credentials for controller-manager in kubeconfig
          ansible.builtin.shell: |
            kubectl config set-credentials controller-manager \
              --client-certificate={{ controller_manager_cert }} \
              --client-key={{ controller_manager_key }} \
              --embed-certs=true \
              --kubeconfig={{ kubeconfig_dir }}/controller-manager.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Set context for controller-manager in kubeconfig
          ansible.builtin.shell: |
            kubectl config set-context default \
              --cluster=kubernetes-the-hard-way \
              --user=controller-manager \
              --kubeconfig={{ kubeconfig_dir }}/controller-manager.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Use context for controller-manager kubeconfig
          ansible.builtin.shell: |
            kubectl config use-context default --kubeconfig={{ kubeconfig_dir }}/controller-manager.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Generate kubeconfig file for scheduler
          ansible.builtin.shell: |
            kubectl config set-cluster kubernetes-the-hard-way \
              --certificate-authority=ca.pem \
              --embed-certs=true \
              --server=https://{{ kubernetes_public_address }}:6443 \
              --kubeconfig={{ kubeconfig_dir }}/scheduler.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Set credentials for scheduler in kubeconfig
          ansible.builtin.shell: |
            kubectl config set-credentials scheduler \
              --client-certificate={{ scheduler_cert }} \
              --client-key={{ scheduler_key }} \
              --embed-certs=true \
              --kubeconfig={{ kubeconfig_dir }}/scheduler.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Set context for scheduler in kubeconfig
          ansible.builtin.shell: |
            kubectl config set-context default \
              --cluster=kubernetes-the-hard-way \
              --user=scheduler \
              --kubeconfig={{ kubeconfig_dir }}/scheduler.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Use context for scheduler kubeconfig
          ansible.builtin.shell: |
            kubectl config use-context default --kubeconfig={{ kubeconfig_dir }}/scheduler.kubeconfig
          args:
            chdir: "{{ kubeconfig_dir }}"
          register: status
          changed_when: false

        - name: Upload kubeconfigs to gcp
          ansible.builtin.shell: |
            sudo gsutil cp {{ item.source }} {{ item.dest }}
          loop:
            - { source: "/home/wisccourant/certificates/worker-0.kubeconfig", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/worker-1.kubeconfig", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/worker-2.kubeconfig", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/kube-proxy.kubeconfig", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/ca.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/ca-key.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/etcd.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/etcd-key.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/etcd-client.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/etcd-client-key.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/scheduler.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/scheduler-key.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/controller-manager.pem", dest: "gs://kthw-misc/" }
            - { source: "/home/wisccourant/certificates/controller-manager-key.pem", dest: "gs://kthw-misc/" }
            - { src: "/home/wisccourant/certificates/etcd.kubeconfig", dest: "gs://kthw-misc/" }
            - { src: "/home/wisccourant/certificates/controller-manager.kubeconfig", dest: "gs://kthw-misc/" }
            - { src: "/home/wisccourant/certificates/scheduler.kubeconfig", dest: "gs://kthw-misc/" }
          changed_when: false
          register: status

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0
