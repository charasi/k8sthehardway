---
- name: Bootstrapping the Kubernetes Worker Nodes
  hosts: k8workers
  remote_user: wisccourant
  become: true

  tasks:
    - name: Provision a Kubernetes Worker Node
      block:
        - name: Install the OS dependencies
          ansible.builtin.command:
            cmd: sudo apt-get -y install socat
          changed_when: false

        - name: Download cni plugins
          ansible.builtin.get_url:
            url: "https://github.com/containernetworking/plugins/releases/download/v1.6.2/cni-plugins-linux-amd64-v1.6.2.tgz"
            dest: /home/wisccourant/
            mode: '0755'
          register: output

        - name: Print information from the previous task
          ansible.builtin.debug:
            var: output
            verbosity: 0

        - name: Download cri-containerd
          ansible.builtin.get_url:
            url: "https://storage.googleapis.com/cri-containerd-release/cri-containerd-1.1.0-rc.1.linux-amd64.tar.gz"
            dest: /home/wisccourant/
            mode: '0755'
          register: output

        - name: Print information from the previous task
          ansible.builtin.debug:
            var: output
            verbosity: 0

        - name: Download kubectl
          ansible.builtin.get_url:
            url: "https://storage.googleapis.com/kubernetes-release/release/v1.31.0/bin/linux/amd64/kubectl"
            dest: /home/wisccourant/
            mode: '0755'
          register: output

        - name: Print information from the previous task
          ansible.builtin.debug:
            var: output
            verbosity: 0

        - name: Download kube-proxy
          ansible.builtin.get_url:
            url: "https://storage.googleapis.com/kubernetes-release/release/v1.31.0/bin/linux/amd64/kube-proxy"
            dest: /home/wisccourant/
            mode: '0755'
          register: output

        - name: Print information from the previous task
          ansible.builtin.debug:
            var: output
            verbosity: 0

        - name: Download kubelet
          ansible.builtin.get_url:
            url: "https://storage.googleapis.com/kubernetes-release/release/v1.31.0/bin/linux/amd64/kubelet"
            dest: /home/wisccourant/
            mode: '0755'
          register: output

        - name: Print information from the previous task
          ansible.builtin.debug:
            var: output
            verbosity: 0

        - name: Create the installation directories
          ansible.builtin.shell: |
            sudo mkdir -p \
              /etc/cni/net.d \
              /opt/cni/bin \
              /var/lib/kubelet \
              /var/lib/kube-proxy \
              /var/lib/kubernetes \
              /var/run/kubernetes
            sudo chown root:root /
          changed_when: false

        - name: Extract the CNI plugins for Kubernetes
          ansible.builtin.command:
            cmd: sudo tar -xvf cni-plugins-linux-amd64-v1.6.2.tgz -C /opt/cni/bin/
            chdir: /home/wisccourant/
          changed_when: false

        - name: Extract and place in root directory
          ansible.builtin.command:
            cmd: sudo tar -xvf cri-containerd-1.1.0-rc.1.linux-amd64.tar.gz -C /
            chdir: /home/wisccourant/
          changed_when: false

        - name: Make Kubernetes binaries executable
          ansible.builtin.command:
            cmd: chmod +x kubectl kube-proxy kubelet
            chdir: /home/wisccourant/
          changed_when: false

        - name: Move (kubectl, kube-proxy, and kubelet) to the /usr/local/bin/ directory
          ansible.builtin.command:
            cmd: sudo mv kubectl kube-proxy kubelet /usr/local/bin/
            chdir: /home/wisccourant/
          changed_when: false

        - name: Get POD_CIDR from gcp
          ansible.builtin.shell: |
            POD_CIDR=$(curl -s -H "Metadata-Flavor: Google" \
              http://metadata.google.internal/computeMetadata/v1/instance/attributes/pod-cidr)
          changed_when: false
          register: status

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create the bridge network configuration file
          ansible.builtin.shell: |
            cat > 10-bridge.conf <<EOF
            {
                "cniVersion": "0.3.1",
                "name": "bridge",
                "type": "bridge",
                "bridge": "cnio0",
                "isGateway": true,
                "ipMasq": true,
                "ipam": {
                    "type": "host-local",
                    "ranges": [
                      [{"subnet": "${POD_CIDR}"}]
                    ],
                    "routes": [{"dst": "0.0.0.0/0"}]
                }
            }
            EOF
          args:
            chdir: /home/wisccourant/
          changed_when: false

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create the loopback network configuration file
          ansible.builtin.shell: |
            cat > 99-loopback.conf <<EOF
            {
                "cniVersion": "0.3.1",
                "type": "loopback"
            }
            EOF
          args:
            chdir: /home/wisccourant/
          changed_when: false

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Move the network configuration files to the CNI configuration directory
          ansible.builtin.command:
            cmd: sudo mv 10-bridge.conf 99-loopback.conf /etc/cni/net.d/
            chdir: /home/wisccourant/
          changed_when: false

        - name: Get the main IP address
          ansible.builtin.command:
            cmd: hostname -I
          register: ip_address
          changed_when: false

        - name: Retrieve the internal IP address for the current compute instance
          ansible.builtin.command:
            cmd: hostname
          register: host_name
          changed_when: false

        - name: Download from gcp and Configure the Kubelet
          ansible.builtin.shell: |
            sudo chown root:root /
            sudo gsutil cp {{ item.source }} {{ item.dest }}
          loop:
            - { source: "gs://kthw-misc/{{ host_name.stdout | trim }}-key.pem", dest: "/var/lib/kubelet/" }
            - { source: "gs://kthw-misc/{{ host_name.stdout | trim }}.pem", dest: "/var/lib/kubelet/" }
            - { source: "gs://kthw-misc/ca.pem", dest: "/var/lib/kubernetes/" }
            - { source: "gs://kthw-misc/static_ip.txt", dest: "/var/lib/kubernetes/" }
            - { source: "gs://kthw-misc/kube-proxy.pem", dest: "/var/lib/kube-proxy/" }
            - { source: "gs://kthw-misc/kube-proxy-key.pem", dest: "/var/lib/kube-proxy/" }
          changed_when: false
          register: status

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Read the IP address from the text file
          ansible.builtin.command:
            cmd: cat /var/lib/kubernetes/static_ip.txt
            chdir: /var/lib/kubernetes/
          register: kubernetes_public_address
          changed_when: false

        - name: Verify that the IP address was retrieved
          ansible.builtin.assert:
            that:
              - kubernetes_public_address.stdout | length > 0  # Ensures the content is not empty
            msg: "No IP address was retrieved from the file."

        - name: Use the IP address
          ansible.builtin.debug:
            msg: "The extracted IP address is: {{ kubernetes_public_address.stdout }}"

        - name: Generate a kubeconfig file for each worker node
          ansible.builtin.shell: |
            kubectl config set-cluster kubernetes-the-hard-way \
              --certificate-authority=/var/lib/kubernetes/ca.pem \
              --embed-certs=true \
              --server=https://{{ kubernetes_public_address.stdout | trim }}:6443 \
              --kubeconfig=/var/lib/kubelet/{{ host_name.stdout | trim }}.kubeconfig
          args:
            chdir: /var/lib/kubelet/
          register: status
          changed_when: false

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Set or modify credentials for a user in the kubeconfig file
          ansible.builtin.shell: |
            kubectl config set-credentials system:node:{{ host_name.stdout | trim }} \
              --client-certificate=/var/lib/kubelet/{{ host_name.stdout | trim }}.pem \
              --client-key=/var/lib/kubelet/{{ host_name.stdout | trim }}-key.pem \
              --embed-certs=true \
              --kubeconfig=/var/lib/kubelet/{{ host_name.stdout | trim }}.kubeconfig
          args:
            chdir: /var/lib/kubelet/
          register: status
          changed_when: false

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create or modify a context in your kubeconfig file, linking a Kubernetes cluster, user, and namespace
          ansible.builtin.shell: |
            kubectl config set-context default \
              --cluster=kubernetes-the-hard-way \
              --user=system:node:{{ host_name.stdout | trim }} \
              --kubeconfig=/var/lib/kubelet/{{ host_name.stdout | trim }}.kubeconfig
          args:
            chdir: /var/lib/kubelet/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Switch between different configurations in your kubeconfig file
          ansible.builtin.shell: |
            kubectl config use-context default --kubeconfig=/var/lib/kubelet/{{ host_name.stdout | trim }}.kubeconfig
          args:
            chdir: /var/lib/kubelet/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Generate a kubeconfig file for the kube-proxy service
          ansible.builtin.shell: |
            kubectl config set-cluster kubernetes-the-hard-way \
              --certificate-authority=/var/lib/kubernetes/ca.pem \
              --embed-certs=true \
              --server=https://{{ kubernetes_public_address.stdout | trim }}:6443 \
              --kubeconfig=/var/lib/kube-proxy/kube-proxy.kubeconfig
          args:
            chdir: /var/lib/kube-proxy/
          register: status
          changed_when: false

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create or modify a context in your kubeconfig file, linking a Kubernetes cluster, user, and namespace
          ansible.builtin.shell: |
            kubectl config set-credentials kube-proxy \
              --client-certificate=/var/lib/kube-proxy/kube-proxy.pem \
              --client-key=/var/lib/kube-proxy/kube-proxy-key.pem \
              --embed-certs=true \
              --kubeconfig=/var/lib/kube-proxy/kube-proxy.kubeconfig
          args:
            chdir: /var/lib/kube-proxy/
          register: status
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create or modify a context in your kubeconfig file, linking a Kubernetes cluster, user, and namespace
          ansible.builtin.shell: |
            kubectl config set-context default \
              --cluster=kubernetes-the-hard-way \
              --user=kube-proxy \
              --kubeconfig=/var/lib/kube-proxy/kube-proxy.kubeconfig
          args:
            chdir: /var/lib/kube-proxy/
          register: status
          changed_when: false

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Switch between different configurations in your kubeconfig file
          ansible.builtin.shell: |
            kubectl config use-context default --kubeconfig=/var/lib/kube-proxy/kube-proxy.kubeconfig
          args:
            chdir: /var/lib/kube-proxy/
          register: status
          changed_when: false

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create the kubelet.service systemd unit file
          ansible.builtin.shell: |
            cat > kubelet.service <<EOF
            [Unit]
            Description=Kubernetes Kubelet
            Documentation=https://github.com/GoogleCloudPlatform/kubernetes
            After=containerd.service
            Requires=containerd.service

            [Service]
            ExecStart=/usr/local/bin/kubelet \\
              --kubeconfig=/var/lib/kubelet/{{ host_name.stdout | trim }}.kubeconfig \\
              --container-runtime-endpoint=unix:///run/containerd/containerd.sock \\
              --pod-cidr=${POD_CIDR} \\
              --register-node=true \\
              --runtime-request-timeout=15m \\
              --tls-cert-file=/var/lib/kubelet/{{ host_name.stdout | trim }}.pem \\
              --tls-private-key-file=/var/lib/kubelet/{{ host_name.stdout | trim }}-key.pem \\
              --v=2
            Restart=on-failure
            RestartSec=5

            [Install]
            WantedBy=multi-user.target
            EOF
          args:
            chdir: /home/wisccourant/
          changed_when: false

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Create the kube-proxy.service systemd unit file
          ansible.builtin.shell: |
            cat > kube-proxy.service <<EOF
            [Unit]
            Description=Kubernetes Kube Proxy
            Documentation=https://github.com/GoogleCloudPlatform/kubernetes

            [Service]
            ExecStart=/usr/local/bin/kube-proxy \\
              --cluster-cidr=10.200.0.0/16 \\
              --kubeconfig=/var/lib/kube-proxy/kube-proxy.kubeconfig \\
              --proxy-mode=iptables \\
              --v=2
            Restart=on-failure
            RestartSec=5

            [Install]
            WantedBy=multi-user.target
            EOF
          args:
            chdir: /home/wisccourant/
          changed_when: false

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0

        - name: Move the kubelet.service and kube-proxy.service files to /etc/systemd/system/
          ansible.builtin.command:
            cmd: sudo mv kubelet.service kube-proxy.service /etc/systemd/system/
            chdir: /home/wisccourant/
          changed_when: false

        - name: Daemon-reload
          ansible.builtin.command:
            cmd: sudo systemctl daemon-reload
            chdir: /home/wisccourant/
          changed_when: false

        - name: Enable
          ansible.builtin.command:
            cmd: sudo systemctl enable containerd kubelet kube-proxy
            chdir: /home/wisccourant/
          changed_when: false

        - name: Start the Worker Services
          ansible.builtin.command:
            cmd: sudo systemctl start containerd kubelet kube-proxy
            chdir: /home/wisccourant/
          changed_when: false

        - name: Start the Worker Services
          ansible.builtin.command:
            cmd: kubectl get nodes
            chdir: /home/wisccourant/
          register: output
          changed_when: false

        - name: Verify cmd process sucessfully
          ansible.builtin.debug:
            var: output
            verbosity: 0
