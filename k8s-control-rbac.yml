---
- name: Add RBAC for scheduler, controller-manager, and reverse
  hosts: k8controller1
  remote_user: wisccourant
  become: true

  tasks:
    - name: Provision the Kubernetes Control Plane
      block:
        - name: Create custom ClusterRole for scheduler
          ansible.builtin.shell: |
            set -o pipefail
            export KUBECONFIG=/var/lib/kubernetes/scheduler.kubeconfig
            cat <<EOF | kubectl apply -f -
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              annotations:
                rbac.authorization.kubernetes.io/autoupdate: "true"
              labels:
                kubernetes.io/bootstrapping: rbac-defaults
              name: scheduler-role
            rules:
              - apiGroups:
                  - ""
                resources:
                  - nodes/proxy
                  - nodes/stats
                  - nodes/log
                  - nodes/spec
                  - nodes/metrics
                verbs:
                  - "*"
            EOF
          register: rbac_status
          changed_when: false
          args:
            executable: /bin/bash

        - name: Bind custom ClusterRole to scheduler
          ansible.builtin.shell: |
            set -o pipefail
            export KUBECONFIG=/var/lib/kubernetes/scheduler.kubeconfig
            cat <<EOF | kubectl apply -f -
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: scheduler-role-binding
              namespace: ""
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: scheduler-role
            subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: scheduler
            EOF
          register: rbac_binding_status
          changed_when: false
          args:
            executable: /bin/bash

        # Verify the ClusterRole and ClusterRoleBinding for the current user
        - name: Verify ClusterRole creation for scheduler
          ansible.builtin.debug:
            var: rbac_status

        - name: Verify ClusterRoleBinding creation for scheduler
          ansible.builtin.debug:
            var: rbac_binding_status

        - name: Set correct permissions for kubeconfig controller-manager
          ansible.builtin.command:
            cmd: sudo chmod 644 /var/lib/kubernetes/controller-manager.kubeconfig
          register: chmod_status
          changed_when: true

        - name: Create custom ClusterRole for reverse
          ansible.builtin.shell: |
            set -o pipefail
            export KUBECONFIG=/var/lib/kubernetes/reverse.kubeconfig
            cat <<EOF | kubectl apply -f -
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              name: reverse-role
              annotations:
                rbac.authorization.kubernetes.io/autoupdate: "true"
              labels:
                kubernetes.io/bootstrapping: rbac-defaults
            rules:
              - apiGroups: [""]
                resources:
                  - pods
                  - services
                  - endpoints
                  - nodes
                  - livez
                verbs:
                  - "get"          
            EOF
          register: rbac_status
          changed_when: false
          args:
            executable: /bin/bash

        - name: Bind custom ClusterRole to reverse
          ansible.builtin.shell: |
            set -o pipefail
            export KUBECONFIG=/var/lib/kubernetes/reverse.kubeconfig
            cat <<EOF | kubectl apply -f -
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: reverse-kube-binding
              namespace: ""
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: system:kube-apiserver-to-kubelet
            subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: reverse
            EOF
          register: rbac_binding_status
          changed_when: false
          args:
            executable: /bin/bash

        # Verify the ClusterRole and ClusterRoleBinding for the current user
        - name: Verify ClusterRole creation for reverse
          ansible.builtin.debug:
            var: rbac_status

        - name: Verify ClusterRoleBinding creation for reverse
          ansible.builtin.debug:
            var: rbac_binding_status

        # Create the RBAC ClusterRole for the current user
        - name: Create custom ClusterRole for controller-manager
          ansible.builtin.shell: |
            set -o pipefail
            export KUBECONFIG=/var/lib/kubernetes/controller-manager.kubeconfig
            cat <<EOF | kubectl apply -f -
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              annotations:
                rbac.authorization.kubernetes.io/autoupdate: "true"
              labels:
                kubernetes.io/bootstrapping: rbac-defaults
              name: system:kube-apiserver-to-kubelet
            rules:
              - apiGroups:
                  - ""
                resources:
                  - nodes/proxy
                  - nodes/stats
                  - nodes/log
                  - nodes/spec
                  - nodes/metrics
                verbs:
                  - "*"
            EOF
          register: rbac_status
          changed_when: false
          args:
            executable: /bin/bash

        # Bind the system:kube-apiserver-to-kubelet ClusterRole to the current user
        - name: Bind custom ClusterRole to controller-manager
          ansible.builtin.shell: |
            set -o pipefail
            export KUBECONFIG=/var/lib/kubernetes/controller-manager.kubeconfig
            cat <<EOF | kubectl apply -f -
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: system:kube-apiserver
              namespace: ""
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: system:kube-apiserver-to-kubelet
            subjects:
              - apiGroup: rbac.authorization.k8s.io
                kind: User
                name: controller-manager
            EOF
          register: rbac_binding_status
          changed_when: false
          args:
            executable: /bin/bash

        # Verify the ClusterRole and ClusterRoleBinding for the current user
        - name: Verify ClusterRole creation for controller-manager
          ansible.builtin.debug:
            var: rbac_status

        - name: Verify ClusterRoleBinding creation for controller-manager
          ansible.builtin.debug:
            var: rbac_binding_status

        - name: Verify services are running
          ansible.builtin.shell: |
            export KUBECONFIG=/var/lib/kubernetes/controller-manager.kubeconfig
            kubectl get componentstatuses
          register: output
          changed_when: false

        - name: Get output
          ansible.builtin.debug:
            var: output
            verbosity: 0

        - name: Read the IP address from the text file
          ansible.builtin.command:
            cmd: cat /var/lib/kubernetes/static_ip.txt
            chdir: /var/lib/kubernetes/
          register: kubernetes_public_address
          changed_when: false

        - name: Make a HTTP request for the Kubernetes version info
          ansible.builtin.shell: |
            curl --cacert /var/lib/kubernetes/ca.pem \
                 --cert /var/lib/kubernetes/scheduler.pem \
                 --key /var/lib/kubernetes/scheduler-key.pem \
                 https://{{ kubernetes_public_address.stdout | trim }}:6443/version
          changed_when: false
          register: status
          tags:
            - skip_ansible_lint

        - name: Verify cmd process successfully
          ansible.builtin.debug:
            var: status
            verbosity: 0